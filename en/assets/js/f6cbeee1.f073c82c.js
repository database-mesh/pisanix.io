"use strict";(self.webpackChunkpisanix=self.webpackChunkpisanix||[]).push([[3836],{4641:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"releasev030","metadata":{"permalink":"/en/blog/releasev030","source":"@site/blog/2022-09-29-release-v030.md","title":"Pisanix v0.3.0 Released !","description":"Database Mesh-oriented solutions for an easy-to-use, good-to-use, and practical user experience.","date":"2022-09-29T00:00:00.000Z","formattedDate":"September 29, 2022","tags":[{"label":"pisanix","permalink":"/en/blog/tags/pisanix"},{"label":"v0.3.0","permalink":"/en/blog/tags/v-0-3-0"}],"readingTime":7.275,"truncated":false,"authors":[{"name":"Maxwell Miao","title":"Founder of Pisanix","url":"https://github.com/mlycore","imageURL":"https://github.com/mlycore.png","key":"Maxwell"},{"name":"Jiandong Wu","title":"Maintainer of Pisanix","url":"https://github.com/xuanyuan300","imageURL":"https://i.imgur.com/aQBGA3H_d.webp?maxwidth=760&fidelity=grand","key":"Jiandong"},{"name":"Bo Wang","title":"Maintainer of Pisanix","url":"https://github.com/wbtlb","imageURL":"https://avatars.githubusercontent.com/u/12859337?s=400&u=a7a03e467206e9b248b75fd57f681da7ce2caa34&v=4","key":"Bo"}],"frontMatter":{"slug":"releasev030","title":"Pisanix v0.3.0 Released !","authors":["Maxwell","Jiandong","Bo"],"tags":["pisanix","v0.3.0"]},"nextItem":{"title":"Pisanix v0.2.0 Released !","permalink":"/en/blog/releasev020"}},"content":"> Database Mesh-oriented solutions for an easy-to-use, good-to-use, and practical user experience.\\n\\nPisanix v0.3.0 is Released, Introducing Data Sharding Strategy!.\\n\\n> Data sharding is an effective solution to deal with massive data storage and computation. Pisanix now provides data sharding governance capability based on the underlying database, allowing users to scale out computing and storage.\\n\\nData sharding is an effective solution to deal with massive data storage and computation.\\n\\nPisanix, a database mesh solution sponsored by SphereEx, now provides data sharding governance capability based on the underlying database - allowing users to scale out computing and storage.\\n\\nStarting from v0.3.0, Pisanix will gradually support data sharding, with this release supporting single database sharding.\\n\\n##  Introducing data sharding \\n\\nAs shown in Figure 1 below, data sharding mainly consists of SQL parse, SQL rewriting, SQL route, SQL execution, and result merge.\\n\\n<img src=\\"/img/release-v030-1.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n**Concepts**\\n\\n**SQL Parse**: During the sharding process, once the request is received by Pisa-Proxy, it will first go through SQL Parser, and the SQL will be parsed into AST. \\n\\n**SQL Rewriting**: After parsing, Pisa-Proxy will rewrite the current SQL statement according to the sharding rules to generate the real SQL statement to be executed.\\n\\n**SQL Route**: Pisa-Proxy routes the rewritten SQL statements to the corresponding data source at the backend to execute the SQL statements according to the sharding rules. \\n\\n**SQL Execution**: Pisa-Proxy will rewrite the SQL statement and push it down to the back-end real database for execution. \\n\\n**Result Merge**: Pisa-Proxy merges the query results and returns them to the client.\\n\\n### Introducing SQL Rewriting \\n\\nSQL rewriting is a critical module in data sharding. Pisa-Proxy needs to rewrite the current SQL statement according to the sharding rules to generate the real SQL statement to be executed. SQL rewriting can be of the following types:\\n\\n#### Identifier Rewriting\\n\\nIdentifiers to be rewritten include table names, index names, and schema names.\\n\\nTable name rewriting means the process of finding the location of a logical table in the original SQL and rewriting it to a real table. Table name rewriting is a typical scenario that requires parsing of SQL. For example, if the logical SQL is:\\n\\n```SQL\\nSELECT order_id FROM order.t_order WHERE order_id = 1;\\n```\\n\\nSuppose that the shard key of this table is `order_id` and `order_id=1`, and the number of sharding is specified as two, then the SQL statement would be as follows:\\n\\n```SQL\\nSELECT order_id FROM order.t_order_00001 WHERE order_id = 1;\\n```\\n\\nThe following figure shows the data query process:\\n\\n\\n<img src=\\"/img/release-v030-2.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\nTaking data writing as an example, the data insertion process is as follows:\\n\\n\\n<img src=\\"/img/release-v030-3.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n**Note:** When the SQL rewriting process modifies the identifier to calculate the real table name, it will automatically add the table index according to the sharding rule. The index rule is table name_index, and the index bit is five. For example, the t_order table is overwritten to t_order_00000. Therefore, you need to create the corresponding table name based on the actual business scenario.\\n\\n### Column Supplement Rewriting \\n\\nThere are two cases that need supplement columns in a query statement. In the first case, Pisa-Proxy needs to get the data during the result merge, but the data is not returned by the queried SQL.\\n\\nIn this case, it mainly applies to GROUP BY and ORDER BY. When merging the results, you need to group and order the field items according to GROUP BY and ORDER BY, but if the original SQL does not contain grouping or ordering items in the selections, you need to rewrite the original SQL.\\n\\nFor instance, with an instance with the following SQL statement:\\n\\n```SQL\\nSELECT order_id, user_id FROM t_order ORDER BY user_id;\\n```\\n\\nSince user_id is used for sorting, the data of user_id needs to be retrieved in the result merge, the above SQL statement contains the data of user_id, so there is no need to add columns, and modifying the identifier is enough.\\n\\n```SQL\\nSELECT order_id FROM t_order ORDER BY user_id;\\n```\\n\\nThis SQL depends on the user_id for sorting. Therefore, the column must be supplemented. The rewritten SQL is as follows:\\n\\n```SQL\\nSELECT order_id, user_id AS USER_ID_ORDER_BY_DERIVED_00000 FROM t_order_00000 ORDER BY user_id;\\n```\\nThe second case of column supplement is the use of AVG aggregate functions.\\n\\nIn distributed scenarios, using (avg1 + avg2 + avg3)/3 to calculate the average is incorrect and should be rewritten as (sum1 + sum2 + sum3) /(count1 + count2 + count3).\\n\\nIn this case, rewriting the SQL containing AVG to SUM and COUNT is required, and recalculating the average when the results are merged. For example:\\n\\n```SQL\\nSELECT AVG(price) FROM t_order WHERE user_id = 1;\\n```\\nThe rewritten SQL is as follows:\\n\\n```SQL\\nSELECT COUNT(price) AS AVG_DERIVED_COUNT_00000, SUM(price) AS AVG_DERIVED_SUM_00000 FROM t_order_00000 WHERE user_id = 1;\\n```\\n\\n### Configuration Description\\n\\nThis release supports query, update, deletion, and modification of the single database sharding based on a single shard key. The configuration items are as follows:\\n\\n| Property | Value Type|Dependency or not|Default Value| Description|\\n|:-:|:-:|:-:|:-:|:-:|\\n|table_name|String|Yes|No|sharding table name|\\n|actual_datanodes|Array[String]|Yes|No|backend data source|\\n|table_sharding_algorithm_name|Enum|Yes|No|sharding algorithm(crc32mode and mod)|\\n|table_sharding_column|String|Yes|No|shard key|\\n|sharding_count|u64|Yes|No|number of sharding|\\n\\n**Note**: The broadcast table, binding table, sub-query, table sharding, distributed rules based on expressions, distributed transaction, and cross-database Join will be gradually supported in later versions.\\n\\nTaking the scenario in Figure 2 and Figure 3 as an example, its corresponding CRD configuration is as follows:\\n\\n```Yaml\\n# Declare a VirtualDatabase as a logical database\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: VirtualDatabase\\nmetadata:\\n  name: test\\n  namespace: default\\nspec:\\n  services:\\n  - databaseMySQL:\\n      db: test\\n      host: 127.0.0.1\\n      password: \\"root\\"\\n      port: 3306\\n      user: root\\n    name: mysql\\n    trafficStrategy: test\\n    dataShard: test\\n---\\n# Declare TrafficStrategy the specified proxy\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: TrafficStrategy\\nmetadata:\\n  name: test\\n  namespace: default\\nspec:\\n  loadBalance:\\n    simpleLoadBalance:\\n      kind: random\\n  selector:\\n    matchLabels:\\n      source: test\\n---\\n# Declare DataShard the sharding rules\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: DataShard\\nmetadata:\\n  name: test\\n  namespace: default\\n  labels:\\n    source: test\\nspec:\\n  rules:\\n  - tableName: \\"t_order\\"\\n    tableStrategy:\\n      tableShardingAlgorithmName: \\"mod\\"\\n      tableShardingColumn: \\"id\\"\\n      shardingCount: 2\\n    actualDatanodes:\\n      valueSource:\\n        nodes:\\n        - value: \\"ds001\\"\\n---\\n# Declare DatabaseEndpoint the identified physical database\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: DatabaseEndpoint\\nmetadata:\\n  labels:\\n    source: test\\n  name: ds001\\n  namespace: default\\nspec:\\n  database:\\n    MySQL:\\n      db: test\\n      host: mysql.default\\n      password: root\\n      port: 3306\\n      user: root\\n```\\n\\n## Pisanix v0.3.0 Overview\\n\\nThis release has been made possible thanks to 102 merged PRs by the following contributors:\\n\\n\\n<img src=\\"/img/release-v030-4.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n- New Features\\n  - Pisa-Controller\\n    - Support DataShard CRD #326\\n  - Pisa-Proxy\\n    - Support single database sharding #338\\n- Enhancements\\n  - Pisa-Controller\\n    - Optimized Sidecar injection #234\\n    - Support generic static read/write splitting rule #251\\n  - Pisa-Proxy\\n    - Support SHOW STATUS parser #254\\n    - Introduce CloudWatch Sinker for later audit events #258\\n    - Support CREATE TABLESPACE parser #259\\n    - Support CREATE SERVER #261\\n    - Front MySQL protocol uses tokio codec #263\\n    - Support dynamic read/write splitting Monitor switch #264\\n    - Refactor MySQL server runtime #274\\n    - Experimental SIMD in SQL Parser #278\\n- Fixes\\n  - Pisa-Proxy\\n    - Fix Apple M1 Macbook build failure in some cases #260\\n    - Fix malformed SQL format in some cases #291\\n    - Fix abnormal SQL parsing issues #297\\n    - Fix unexpected AST in some cases #301\\n    - Fix Pisa-Proxy crash without receiving VirtualDatabase configuration #319\\n- Others\\n  - Golang-SDK\\n    - Move CRD and kubernetes client to github.com/database-mesh/golang-sdk #247\\n    - Add DataShard CRD and update VirtualDatabase with DataShard as new spec member in Golang-SDK\\n  - Docs\\n    - Add sharding doc: https://www.pisanix.io/docs/Features/sharding\\n    - Optimized microservices-demo deployment instruction #318\\n    - Fork and optimize the code and configuration of github.com/microservices-demo/microservices-demo for a better demo. See: github.com/database-mesh/microservices-demo\\n  - Charts\\n    - Update controller and proxy mirror to v0.3.0\\n  - Known Issues\\n    - DO NOT support SHOW DATABASES and SHOW TABLES\\n    - DO NOT support observability under sharding mode\\n\\n## Community\\n\\n<img src=\\"/img/release-v030-5.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n**Pisanix is an open source implementation of Database Mesh. It builds unified database governance based on Rust, and aims at providing four major development and application experiences: local database, unified configuration management, multi-protocol support, and cloud-native architecture.**\\n\\nThe community is currently collecting more user scenarios and applications. If you\'ve started or are planning to test Pisanix, please record it in the issue below.\\n\\n[https://github.com/database-mesh/pisanix/issues/282](https://github.com/database-mesh/pisanix/issues/282)\\n\\nThe community will prioritize the development and optimization of features related to real scenarios.\\n\\n\\n<img src=\\"/img/release-v030-6.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n\ud83d\udd17Download link: https://github.com/database-mesh/pisanix/releases/tag/v0.3.0\\n\\n## Community Call\\n\\nBuilding an open source community needs help from everywhere, no matter it\'s code or documentation, issues or pull requests, community thanks all of your efforts.\\n\\nAt present, there are some ways to join the community:\\n\\n|||\\n|:-|:-|\\n| Mailing List| https://groups.google.com/g/database-mesh |\\n| Dev Meetings (Starting Feb 16th, 2022), Bi-weekly Wednesday 9:00AM PST|https://meet.google.com/yhv-zrby-pyt |\\n| Dev Meetings APAC Friendly (Starting April 27th, 2022), Bi-weekly APAC Wednesday 9:00PM GMT+8|https://meeting.tencent.com/dm/6UXDMNsHBVQO |\\n| Wechat Broker|pisanix|\\n| Slack |https://join.slack.com/t/databasemesh/shared_invite/zt-19rhvnxkz-USjZ~am~ghd_Q0q~8bAJXA  |\\n| Meetings Notes |https://bit.ly/39Fqt3x |\\n\\nFeel free to talk !"},{"id":"releasev020","metadata":{"permalink":"/en/blog/releasev020","source":"@site/blog/2022-08-08-release-v020.md","title":"Pisanix v0.2.0 Released !","description":"Database Mesh","date":"2022-08-08T00:00:00.000Z","formattedDate":"August 8, 2022","tags":[{"label":"pisanix","permalink":"/en/blog/tags/pisanix"},{"label":"v0.2.0","permalink":"/en/blog/tags/v-0-2-0"}],"readingTime":4.46,"truncated":false,"authors":[{"name":"Maxwell Miao","title":"Founder of Pisanix","url":"https://github.com/mlycore","imageURL":"https://github.com/mlycore.png","key":"Maxwell"},{"name":"Jiandong Wu","title":"Maintainer of Pisanix","url":"https://github.com/xuanyuan300","imageURL":"https://i.imgur.com/aQBGA3H_d.webp?maxwidth=760&fidelity=grand","key":"Jiandong"},{"name":"Bo Wang","title":"Maintainer of Pisanix","url":"https://github.com/wbtlb","imageURL":"https://avatars.githubusercontent.com/u/12859337?s=400&u=a7a03e467206e9b248b75fd57f681da7ce2caa34&v=4","key":"Bo"},{"name":"Zhuo Li","title":"Maintainer of Pisanix","url":"https://github.com/windghoul","imageURL":"https://raw.githubusercontent.com/windghoul/imagestorge/master/1-200403142639406.jpeg","key":"Zhuo"}],"frontMatter":{"slug":"releasev020","title":"Pisanix v0.2.0 Released !","authors":["Maxwell","Jiandong","Bo","Zhuo"],"tags":["pisanix","v0.2.0"]},"prevItem":{"title":"Pisanix v0.3.0 Released !","permalink":"/en/blog/releasev030"},"nextItem":{"title":"Pisanix v0.1.1 Released !","permalink":"/en/blog/releasev011"}},"content":"> Database Mesh\\n\\n> Database Mesh-oriented solutions for an easy-to-use, good-to-use, and practical user experience.\\n\\nPisanix version 0.2.0 was recently released. The newly released one supports dynamic read/write splitting. More details below.\\n\\n## Introducing dynamic read/write splitting\\n### Introduction\\n\\nRead/write splitting is one of the most commonly used solutions for MySQL\'s high availability. It improves query performance and reduces server load in practical scenarios. On top of the static rules of v0.1.1, dynamic read/write splitting is added in this release.\\n\\nRead/write splitting rules need to be configured when it comes to splitting with dynamic awareness. Pisa-Proxy performs SQL routing according to the rules. As shown in Figure 1.1, the Pisa-Proxy backend will start four monitors to sense the backend cluster status. \\n\\nMonitor Reconcile will calculate and aggregate the data reported by the Monitor and draw the final state of the backend cluster. Then Monitor Reconcile sends the state information to RulesMatch through the channel. RulesMatch dynamically adjusts the backend data source list once it receives the message.\\n\\nThe concepts included above are: \\n\\n- Node: Backend database node.\\n- RulesMatch: RulesMatch engine matches with the SQL query statements received by Pisa-Proxy based on the written rule set. \\n- TargetRole: A TargetRole group matched by the RulesMatch engine. Each TargetRole group may contain one or more nodes.\\n- LoadBalance: The load balance module selects an appropriate node from the TargetRole group according to the corresponding algorithm.\\n- TargetInstance: Nodes selected by the LoadBalance module.\\n- Discovery: Discovery type, which corresponds to the high availability strategy used by the backend data source, such as MHA, RDS, MGR, etc. The newly released version mainly supports MHA.\\n- Monitor: It refers to the backend detector module of Pisa-Proxy, which mainly relies on four kinds of Monitors in MHA.\\n  - Connect Monitor: detect database connectivity.\\n  - Ping Monitor: detect whether the database is healthy.\\n  - Replication Lag Monitor: detect the latency status of primary-secondary replication. \\n  - Read Only Monitor: detect the roles of primary-secondary databases.\\n\\n<img src=\\"/img/release-v020-1.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n### Read/write splitting configuration\\n\\nThe configuration mode of dynamic read/write splitting is the same as that of the static one. The configuration items of dynamic read/write splitting are as follows: \\n\\n|Parameter|\\tType|\\tDependency or not|\\tDefault Value|\\tDescription|\\n|:-:|:-:|:-:|:-:|:-:|\\n|user|\\tstring|\\tYes|\\tNone|\\tDetector module checks the username of SQL statements.|\\n|password|\\tstring|\\tYes|\\tNone|\\tDetector module checks the password of SQL statements.|\\n|monitor_period|\\tu64|\\tYes|\\t1000|\\tThe period (ms) by which detector module updates and senses the backend data source status.|\\n|connect_period|\\tu64|\\tYes|\\t1000|\\tConnect Monitor detection period (ms)|\\n|connect_timeout|\\tu64|\\tYes|\\t6000|\\tConnect Monitor detection timeout (ms)|\\n|connect_failure_threshold|\\tu64|\\tYes|\\t1|\\tNumber of retries when Connect Monitor detection fails|\\n|ping_period|\\tu64|\\tYes|\\t1000|\\tPing Monitor detection period (ms)|\\n|ping_timeout|\\tu64|\\tYes|\\t6000|\\tPing Monitor detection timeout (ms)|\\n|ping_failure_threshold|\\tu64|\\tYes|\\t1|\\tNumber of retries when Ping Monitor detection fails.|\\n|replication_lag_period|\\tu64|\\tYes|\\t1000|\\tReplication Lag Monitor detection period (ms)|\\n|replication_lag_timeout|\\tu64|\\tYes|\\t6000|\\tReplication Lag Monitor detection timeout (ms)|\\n|replication_lag_failure_threshold|\\tu64|\\tYes|\\t1|\\tNumber of retries when Replication Lag Monitor detection fails.|\\n|max_replication_lag|\\tu64|\\tYes|\\t10000|\\tUser-defined maximum primary/secondary latency threshold (ms)|\\n|read_only_period|\\tu64|\\tYes|\\t1000|\\tRead Only detection period (ms)|\\n|read_only_timeout|\\tu64|\\tYes|\\t6000|\\tRead Only detection timeout (ms)|\\n|read_only_failure_threshold|\\tu64|\\tYes|\\t3|\\tNumber of retries when Read Only Monitor detection fails.|\\n\\nCRD configuration sample:\\n\\n```yaml\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: TrafficStrategy\\nmetadata:\\n  name: catalogue\\n  namespace: demotest\\nspec:\\n  selector:\\n    matchLabels:\\n      source: test\\n  loadBalance:\\n    readWriteSplitting:\\n      dynamic:\\n        defaultTarget: readwrite\\n        discovery:\\n          masterHighAvailability:\\n            connectionProbe:\\n              failureThreshold: 3\\n              periodMilliseconds: 1000\\n              timeoutMilliseconds: 6000\\n            monitorPeriod: 1000\\n            pingProbe:\\n              failureThreshold: 3\\n              periodMilliseconds: 1000\\n              timeoutMilliseconds: 6000\\n            readOnlyProbe:\\n              failureThreshold: 3\\n              periodMilliseconds: 1000\\n              timeoutMilliseconds: 6000\\n            replicationLagProbe:\\n              failureThreshold: 3\\n              maxReplicationLag: 3\\n              periodMilliseconds: 1000\\n              timeoutMilliseconds: 6000\\n            user: monitor\\n            password: monitor\\n        rules:\\n        - algorithmName: roundrobin\\n          name: write-rule\\n          regex:\\n          - ^insert\\n          target: readwrite\\n          type: regex\\n        - algorithmName: roundrobin\\n          name: read-rule\\n          regex:\\n          - ^select\\n          target: read\\n          type: regex\\n```\\n\\n## Pisanix v0.2.0 Description \\n\\n### New features\\n- Pisa-Controller\\n  - Support dynamic read/write splitting in the TrafficStrategy CRD ReadWriteSplitting field #208\\n- Pisa-Proxy\\n  - Support dynamic read/write splitting #204\\n  - Add the sub-command: daemonsidecar #190\\n\\n### Enhancements\\n- Refactor config files of Pisa-Proxy #182\\n- Complete the SHOW SQL statement parsing #183\\n- Add code coverage checks to Pisa-Controller #192\\n- Enable reconnecting when backend data source fails to be connected #215\\n\\n### Improvements\\n- Pisa-Controller\\n  - Fix webhook tls #221\\n- Pisa-Proxy\\n  - Fix the request failure to switch MySQL authentication #170\\n  - Handle exceptions of EOF package of MySQL protocol #166\\n  - Fix the Charset character set #154\\n  - Fix the environment variables injection #223\\n\\n### Others\\n- Docs\\n  - New read/write splitting manual: https://www.pisanix.io/docs/v0.2.0/Features/readwritesplitting/\\n  - Updated standalone deployment manual\uff1ahttps://www.pisanix.io/docs/v0.2.0/UseCases/standalone\\n- Charts\\n  - Updated to v0.2.0\\n\\nThere are 62 PRs in this release. Thanks to the following contributors:\\n- mlycore\\n- xuanyuan300\\n- wbtlb\\n- windghoul\\n- lltgo\\n- tuichenchuxin\\n- dongzl\\n\\n\ud83d\udd17Download link: https://github.com/database-mesh/pisanix/releases/tag/v0.2.0\\n\\n## Community Call\\n\\nBuilding an open source community needs help from everywhere, no matter it\'s code or documentation, issues or pull requests, community thanks all of your efforts.\\n\\nAt present, there are some ways to join the community:\\n\\n|||\\n|:-|:-|\\n| Mailing List| https://groups.google.com/g/database-mesh |\\n| Dev Meetings (Starting Feb 16th, 2022), Bi-weekly Wednesday 9:00AM PST|https://meet.google.com/yhv-zrby-pyt |\\n| Dev Meetings APAC Friendly (Starting April 27th, 2022), Bi-weekly APAC Wednesday 9:00PM GMT+8|https://meeting.tencent.com/dm/6UXDMNsHBVQO |\\n| Wechat Broker|pisanix|\\n| Slack |https://join.slack.com/t/databasemesh/shared_invite/zt-19rhvnxkz-USjZ~am~ghd_Q0q~8bAJXA  |\\n| Meetings Notes |https://bit.ly/39Fqt3x |\\n\\nFeel free to talk !"},{"id":"releasev011","metadata":{"permalink":"/en/blog/releasev011","source":"@site/blog/2022-06-28-release-v011.md","title":"Pisanix v0.1.1 Released !","description":"Pisanix v0.1.1 is now released three weeks after Pisanix v0.1.0 was released. This new version supports read/write splitting and fixes some problems of the old version.","date":"2022-06-28T00:00:00.000Z","formattedDate":"June 28, 2022","tags":[{"label":"pisanix","permalink":"/en/blog/tags/pisanix"},{"label":"v0.1.1","permalink":"/en/blog/tags/v-0-1-1"}],"readingTime":4.08,"truncated":false,"authors":[{"name":"Maxwell Miao","title":"Founder of Pisanix","url":"https://github.com/mlycore","imageURL":"https://github.com/mlycore.png","key":"Maxwell"},{"name":"Jiandong Wu","title":"Maintainer of Pisanix","url":"https://github.com/xuanyuan300","imageURL":"https://i.imgur.com/aQBGA3H_d.webp?maxwidth=760&fidelity=grand","key":"Jiandong"},{"name":"Bo Wang","title":"Maintainer of Pisanix","url":"https://github.com/wbtlb","imageURL":"https://avatars.githubusercontent.com/u/12859337?s=400&u=a7a03e467206e9b248b75fd57f681da7ce2caa34&v=4","key":"Bo"},{"name":"Zhuo Li","title":"Maintainer of Pisanix","url":"https://github.com/windghoul","imageURL":"https://raw.githubusercontent.com/windghoul/imagestorge/master/1-200403142639406.jpeg","key":"Zhuo"}],"frontMatter":{"slug":"releasev011","title":"Pisanix v0.1.1 Released !","authors":["Maxwell","Jiandong","Bo","Zhuo"],"tags":["pisanix","v0.1.1"]},"prevItem":{"title":"Pisanix v0.2.0 Released !","permalink":"/en/blog/releasev020"},"nextItem":{"title":"Hello! Pisanix!","permalink":"/en/blog/greetings"}},"content":"Pisanix v0.1.1 is now released three weeks after Pisanix v0.1.0 was released. This new version supports read/write splitting and fixes some problems of the old version.\\n\\n## Pisanix v0.1.1 Description\\n\\n### New Features\\n- Pisa -Controller\\n  - Add ReadWriteSplitting configuration to TrafficStrategy CRD\\n- Pisa-Proxy\\n  - Introduce MetricsManager and MetricsCollector, laying a foundation for processing Metrics later.\\n  - Add sql_under_processingmetric as Gauge, referring to the number of SQL under processing\\n  - Support static read-write splitting rules\\n  - Support TCL statement parsing\\n  - Add show databases,show tables, and create database statements parsing\\n\\n### Improvements\\n- Pisa-Controller\\n  - Fix ApiService json parsing error, resulting in that namespace cannot be deleted. #34\\n  - Support Regex array for CircuitBreak, ConcurrencyControl and ReadWriteSplitting. #123 #124\\n  - Rename sidecar name to pisa-proxy. #72\\n  - Add default host as 0.0.0.0 and port as 3306 to MySQL type VirtualDatabase. #68\\n  - Add server_version to Pisa-Proxy, referring to the MySQL version. #111\\n- Pisa-Proxy\\n  - Support default admin port as 5591, which can be used to obtain metrics. #121\\n  - Fix the packet processing exceptions when the PREPARE statement is too long. #73\\n  - Fix SQL parsing ability. #98 #104\\n\\n### Others\\n- Docs\\n  - The first blog\uff1ahttps://www.pisanix.io/blog\\n  - Update CRD description\uff1ahttps://www.pisanix.io/docs/v0.1.1/UseCases/kubernetes\\n  - Add read-write splitting description\uff1ahttps://www.pisanix.io/docs/v0.1.1/Features/readwritesplitting\\n  - Add versions: For now, v0.1.0 and v0.1.1 documents are available.\\n- Charts\\n  - Update to 0.1.1\\n\\n## Introducing Read-Write Splitting \\n\\nRead-write splitting is one of the most commonly used MySQL solutions in the industry. In actual scenarios, it can improve query performance and reduce server load. The general structure is as follows:\\n\\nRead-write splitting is  part of the traffic strategies in Pisa-Proxy.\\n\\nCurrently, Pisa-Proxy supports two kinds of read-write splitting solutions:\\n- Static read-write splitting: no backend awareness of database role change.\\n- Dynamic read-write splitting (coming): backend awareness of the primary and secondary databases change.\\n\\nCurrently, both solutions require the configuration of read-write splitting rules. The read-write splitting rule refers to that Pisa-Proxy needs to match the SQL statement queried with the configured rule. If the match succeeds, the SQL statement is routed to the corresponding node according to the rule. If the match fails, the SQL statement is routed to the configured default node.\\n\\nThere are several concepts included\uff1a\\n\\n- Node: the backend database node.\\n- RulesMatch: The RulesMatch engine matches the SQL query statements received by Pisa-Proxy by the compiled rule set.\\n- TargetRole: The TargetRole group matched by the rule matching engine. Each TargetRole group may contain one or more nodes.\\n- LoadBalance: The load balancer module will select an appropriate node from the TargetRole group according to corresponding algorithms.\\n- TargetInstance: nodes selected from the LoadBalance module.\\n\\n\\nThe implementation logic is as follows: \\n\\n### Read-Write Splitting Configuration \\n\\n|Property|Value Type|Dependency or not|Default Value|Implication|\\n|:-:|:-:|:-:|:-:|:-:|\\n|static|object|No|No|Static R/W splitting type|\\n|dynamic|object|No|No|Dynamic R/W splitting configuration|\\n\\n#### Static read-write splitting configuration\\n\\n|Property|Value Type|Dependency or not|Default Value|Implication|\\n|:-:|:-:|:-:|:-:|:-:|\\n|defaultTarget|enum|No|No|The target group of default routing|\\n|rules|array{rule}|Yes|No|Read-write splitting rule|\\n\\n#### Read-Write Splitting Rule Description\\n\\nCurrently, read-write splitting rules can only be matched through RegEx. The rule configuration description is as follows: \\n\\n|Property|Value Type|Dependency or not|Default Value|Implication|\\n|:-:|:-:|:-:|:-:|:-:|\\n|name|string|Yes|No|Rule name|\\n|type|string|Yes|No|The routing type belongs to RegEx, and the value here is regex.|\\n|regex|array{string}|Yes|No|Specific regex, used to match SQL statements|\\n|target|enum|Yes|No|The TargetRole group that is routed to, corresponding to the value of database-mesh.io/role in DatabaseEndpoint Annotations.|\\n|algorithmName|enum|Yes|No|The name of the load balancer algorithm used for the machine lists that are routed to the role group.|\\n\\nNote: the Enum values above are respectively: \\n- TargetRole Enum value\\n  - read\\n  - readwrite\\n- algorithName Enum value\\n  - random\\n  - roundrobin\\n\\n### Sample\\n\\nThe configuration of a complete TrafficStrategy CRD is as follows:\\n\\n```yaml\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: TrafficStrategy\\nmetadata:\\n  name: test \\n  namespace: default \\nspec:\\n  selector:\\n    matchLabels:\\n      source: test\\n  loadBalance:\\n    readWriteSplitting:\\n      static:  \\n        defaultTarget: read # or readwrite\\n        rules:\\n          - name: read-rule\\n            type: regex\\n            regex:\\n              - \\"^select\\"\\n            target: read # readwrite\\n            algorithmName: random # lb algorithm\\n          - name: write-rule\\n            type: regex\\n            regex:\\n              - \\"^insert\\"\\n            target: readwrite\\n            algorithmName: roundrobin\\n```\\n\\nThe configuration of a complete DatabaseEndpoint CRD is as follows:\\n\\n```yaml\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: DatabaseEndpoint\\nmetadata:\\n  annotations:\\n    database-mesh.io/role: read # or readwrite\\n  labels:\\n    source: test \\n  name: mysql \\n  namespace: default \\nspec:\\n  database:\\n    MySQL:\\n      db: test \\n      host: mysql.default \\n      password: root \\n      port: 3306\\n      user: root\\n```\\n\\n\\n## Community Call\\n\\nThe new version contains 47 PRs and thanks to all the contributors:\\n\\n- mlycore\\n- xuanyuan300\\n- wbtlb\\n- tuichenchuxin\\n- windghoul\\n- TeslaCN\\n\\n\ud83d\udd17Download link\uff1ahttps://github.com/database-mesh/pisanix/releases/tag/v0.1.1\\n\\n\\nBuilding an open source community needs help from everywhere, no matter it\'s code or documentation, issues or pull requests, community thanks all of your efforts.\\n\\nAt present, there are some ways to join the community:\\n\\n|||\\n|:-|:-|\\n| Mailing List| https://groups.google.com/g/database-mesh |\\n| Dev Meetings (Starting Feb 16th, 2022), Bi-weekly Wednesday 9:00AM PST|https://meet.google.com/yhv-zrby-pyt |\\n| Dev Meetings APAC Friendly (Starting April 27th, 2022), Bi-weekly APAC Wednesday 9:00PM GMT+8|https://meeting.tencent.com/dm/6UXDMNsHBVQO |\\n| Wechat Broker|pisanix|\\n| Slack |https://join.slack.com/t/databasemesh/shared_invite/zt-19rhvnxkz-USjZ~am~ghd_Q0q~8bAJXA  |\\n| Meetings Notes |https://bit.ly/39Fqt3x |\\n\\nFeel free to talk !"},{"id":"greetings","metadata":{"permalink":"/en/blog/greetings","source":"@site/blog/2022-04-25-greetings.md","title":"Hello! Pisanix!","description":"June 6th, 2022, Pisanix announced its first release v0.1.0.","date":"2022-04-25T00:00:00.000Z","formattedDate":"April 25, 2022","tags":[{"label":"pisanix","permalink":"/en/blog/tags/pisanix"},{"label":"v0.1.0","permalink":"/en/blog/tags/v-0-1-0"}],"readingTime":5.9,"truncated":false,"authors":[{"name":"Maxwell Miao","title":"Founder of Pisanix","url":"https://github.com/mlycore","imageURL":"https://github.com/mlycore.png","key":"Maxwell"},{"name":"Jiandong Wu","title":"Maintainer of Pisanix","url":"https://github.com/xuanyuan300","imageURL":"https://i.imgur.com/aQBGA3H_d.webp?maxwidth=760&fidelity=grand","key":"Jiandong"},{"name":"Bo Wang","title":"Maintainer of Pisanix","url":"https://github.com/wbtlb","imageURL":"https://avatars.githubusercontent.com/u/12859337?s=400&u=a7a03e467206e9b248b75fd57f681da7ce2caa34&v=4","key":"Bo"},{"name":"Zhuo Li","title":"Maintainer of Pisanix","url":"https://github.com/windghoul","imageURL":"https://raw.githubusercontent.com/windghoul/imagestorge/master/1-200403142639406.jpeg","key":"Zhuo"}],"frontMatter":{"slug":"greetings","title":"Hello! Pisanix!","authors":["Maxwell","Jiandong","Bo","Zhuo"],"tags":["pisanix","v0.1.0"]},"prevItem":{"title":"Pisanix v0.1.1 Released !","permalink":"/en/blog/releasev011"}},"content":"June 6th, 2022, Pisanix announced its first release v0.1.0.\\n\\nAs the first open source project of [Database Mesh 2.0](https://www.database-mesh.io), Pisanix follows the core concepts that `building an efficient and programmable database governance experience in cloud native era` from the very beginning. This means Pisanix really hope to help Database Mesh grow to an achievable framework. \\n\\n## Who is Pisanix ?\\n\\nPisanix is the open source solution for Database Mesh, which composes of three different components: `Pisa-Controller`, `Pisa-Proxy` and `Pisa-Daemon`(***Coming Soon***), and is sponsored by [SphereEx](https://www.sphere-ex.com).\\n\\nWritten with Golang and Rustlang, Pisanix is going to build an experience that support SQL aware traffic management, runtime oriented resource programming and Database Reliability Engineering.\\n\\nLike classical Service Mesh deployment pattern, Pisanix also contains a `control-plane` which is `Pisa-Controller`, and two `data-plane` which is `Pisa-Proxy` and `Pisa-Daemon`. \\n\\n <img src=\\"/img/pisanix-arch-blog.png\\" width=\\"600\\" length=\\"600\\"/>\\n\\n### Pisa-Controller\\n\\nAct as the required part of Pisanix, Pisa-Controller is responsible for:\\n\\n* Sidecar injection: Using MutatingAdmissionWebhook inject sidecar to selected Pods\\n* Pisa-Proxy configuration conversion: Retrieve service discovery, load balance, concurrency control, SQL circuit break configs in CRDs and convert them to Pisa-Proxy configurations\\n* Pisa-Daemon configuration conversion: Retrieve traffic QoS configs in CRDs and convert them to Pisa-Daemon configurations\\n\\n### Pisa-Proxy\\n\\nPisa-Proxy is the core part of Pisanix, working as a high-performance proxy for different protocols. Currently supports:\\n* SQL traffic control: Traffic load balance, concurrency control and\\n* Access Control: Fine-grained access control rule according to user and data relationship\\n* Circuit break: Reject high risk SQL execution\\n* Observability: Metrics about SQL processing: latency\u3001throughput\\n\\n### Pisa-Daemon\\n\\nPisa-Daemon is optional and will be release soon. Features like runtime resource management, such as providing traffic QoS with the help of eBPF is what Pisa-Daemon care about. \\n\\n## What does Maintainers say ?\\n\\n[Maxwell](https://github.com/mlycore): \\"Thanks to the cloud native ecosystem and all of the open source projects. We have learned a lot from the community, and now we get the chance to do something, that is Pisanix. The core motivation of Pisanix is to help, help developers, SREs and DBAs, and also help databases. This makes Pisanix a very meaningful infrastructure software. Thanks for your attention and support.\\"\\n\\n[Jiandong](https://github.com/xuanyuan300): \\"Pisanix is a concrete practice of the Database Mesh idea. It is a project with great potential. As a nascent community, I hope everyone can participate and witness our growth together.\\"\\n\\n[Bo](https://github.com/wbtlb): \\"Pisanix is a set of governance frameworks in the database DRE project. This framework is all-encompassing. It not only provides users in different scenarios such as developer-facing and DBA, but also provides rich thinking in the field of software design for colleagues in different area. Friends are very welcomed to join the community and build it together.\\"\\n\\n[Zhuo](https://github.com/windghoul): \\"As an emerging project that implements DRE ideas and realizes database-mesh design. Pisanix provides developers, DBAs, and SREs with unlimited possibilities. There will be more designs and inspirations presented to you in the future. I wish everyone will continue to pay attention, build together, and complete this idea.\\"\\n\\n## What\'s new in v0.1.0\\nThis is the first release of `Pisanix`.\\n\\n### Features\\n\\n#### Pisa-Controller\\n##### Setup\\n* Label-based sidecar injection\\n##### Configuration conversion \\n* Kubernetes CRD conversion to Pisa-Proxy configurations, including `VirtualDatabase`, `TrafficStrategy`, `DatabaseEndpoint` \\n\\n#### Pisa-Proxy\\n##### Setup\\n* Retrieve configuration from Pisa-Controller\\n\\n##### Runtime\\n* Support multiple proxy runtimes speaking MySQL protocol\\n* Support connection pool and basic loadbalancing strategy\\n* Support `Yacc` based SQL parser: SELECT, INSERT, UPDATE, DELETE, PREPARE, EXECUTE, BEGIN and SET.\\n* Support `Regex` based SQL circuit break\\n* Support `Regex` based SQL concurrency control\\n\\n##### Observability\\n* Supoort basic observability\\n  * `sql_processed_total`\\n  * `sql_processed_duration`\\n\\n\\n## What can I do with Pisanix ?\\n\\nDatabase Mesh designs with these building blocks and terminology below:\\n* Virtual Database: A database endpoint could be consumed by application\\n* Traffic Strategy: Various strategy for database traffic, such as load balancing, sharding, rate limit and circuit breaker\\n* Access Control: Providing fine-grained admission mechanism\\n* Security Claim: Claim for security enhance mechanism, such as encryption\\n* Audit Request: Request for user operation audit\\n* Observability: Provide a config for observability of databases\\n* Event Bus: Sink database change events to external systems\\n* QoS Claim: Porviding several object guarantee for databases\\n* Backup Job: Database backup jobs\\n* Schema Pipeline: Using pipeline for versioned schema changing\\n\\nPisanix introduced CustomResourceDefinition including `VirtualDatabase`, `Traffic Strategy` and `DatabaseEndpoint` as workloads. And this is a example of Weaveworks [Socks-shop](https://github.com/microservices-demo/microservices-demo). \\n\\n### VirtualDatabase\\nVirtualDatabase is the root concept for every database governance actions in Pisanix. To developers, VirtualDatabase is represented as a database endpoint. For DBAs, VirtualDatabase is some kind of a logical database, so they need to provide some traffic strategy and bind it to a real backend database endpoint.\\n\\n```yaml\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: VirtualDatabase\\nmetadata:\\n  name: catalogue\\n  namespace: default\\nspec:\\n  services:\\n  - databaseMySQL:               # Declare a MySQL database \\n      db: socksdb                # Declare the schema \\n      host: 127.0.0.1            \\n      port: 3306                 \\n      user: catalogue_user       \\n      password: default_password \\n    name: mysql                  \\n    trafficStrategy: catalogue   # The target traffic strategy for the database \\n```\\n\\n\\n### TrafficStrategy\\n\\nTrafficStrategy defines how the SQL requests will be routed to the real database endpoint, strategies like loadbalance, concurrency control, circuit break are supported now.\\n\\n```yaml\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: TrafficStrategy\\nmetadata:\\n  name: catalogue\\n  namespace: default\\nspec:\\n  loadBalance:                   \\n    simpleLoadBalance:           # A simple load balance strategy\\n      kind: random               # support random as selection algorithm \\n  selector:\\n    matchLabels:                 # Declare the label selector to choose the backend database\\n      source: catalogue\\n```\\n\\n### DatabaseEndpoint\\n\\nDatabase Endpoint refers to a real database endpoint, no matter it\'s endpoint of AWS RDS, a MySQL instance, or ShardingSphere. Virtual Database consumes several DatabaseEndpoint with TrafficStrategy.\\n\\n```yaml\\napiVersion: core.database-mesh.io/v1alpha1\\nkind: DatabaseEndpoint\\nmetadata:\\n  name: catalogue-db\\n  namespace: default\\nspec:\\n  database:\\n    MySQL:                        # Declare the database type MySQL \\n      db: socksdb                 \\n      host: cataloguedb.codtynlacssn.rds.cn-northwest-1.amazonaws.com.cn\\n      port: 3306                  \\n      user: root                  \\n      password: fake_password    \\n```\\n\\nNow the working flow is like :\\n1. Developers submit their need of database as VirtualDatabase\\n2. DBAs create and bind TrafficStrategy with DatabaseEndpoint\\n3. SREs add labels `pisanix.io/inject=enabled` to the application and update the configuration with credentials stored in VirtualDatabase.\\n\\nAfter the application is running, we can checkout the Socks-shop website as below:\\n\\n![](/img/socks-shop.png)\\n\\n## How about the next steps ?\\nAs we can see that Pisanix is very young, and have a definitely long way to run. In the next, we will first enhance the ability of traffic governance, like adding data sharding, data access behavior auditing, runtime resource Qos, etc. And we also continuously improving the performance and operability of Pisanix. More extensions mechanism like plugins will be in the future, help users to build their own solution very easily.\\n\\n## Community Call\\n\\nBuilding an open source community needs help from everywhere, no matter it\'s code or documentation, issues or pull requests, community thanks all of your efforts.\\n\\nAt present, there are some ways to join the community:\\n\\n| | |\\n|:-|:-|\\n| Mailing List| https://groups.google.com/g/database-mesh |\\n| Dev Meetings (Starting Feb 27th, 2022), Bi-weekly Wednesday 9:00AM PST|https://meet.google.com/yhv-zrby-pyt |\\n| Dev Meetings APAC Friendly (Starting April 27th, 2022), Bi-weekly APAC Wednesday 9:00PM GMT+8|https://meeting.tencent.com/dm/6UXDMNsHBVQO |\\n| Wechat Broker|pisanix|\\n| Slack |https://join.slack.com/t/databasemesh/shared_invite/zt-19rhvnxkz-USjZ~am~ghd_Q0q~8bAJXA  |\\n| Meetings Notes |https://bit.ly/39Fqt3x |\\n\\nFeel free to talk !"}]}')}}]);